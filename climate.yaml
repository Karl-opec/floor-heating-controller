#### change log ####
# 19.10.2022 : https://github.com/esphome/esphome/pull/3643
# 11.11.2021 : remove away_config (temperature do not survive reboot : https://github.com/esphome/issues/issues/2680#issuecomment-966863690
# 18.11.2023 : change to PID climate



output:
  - platform: template
    id: heater_ch1
    type: float
    min_power: 0.001
    max_power: 0.998
    write_action:
      - cover.control:
            id: CH1_cover
            position: !lambda |-
                              if (abs(id(CH1_cover).position - state) >= id(min_movement).state/100) { return state; }
                              else if (abs(id(CH1_cover).position) >= id(min_movement).state/100 ) {return id(CH1_cover).position;}
                              else {
                                     auto call = id(CH1_cover).make_call();
                                     call.set_command_close();
                                     call.perform();
                                     return (0.000);}

      - logger.log:
            format: "heater CH1 Sollpos: %.3f Istpos: %.3f"
            args: [ 'state','id(CH1_cover).position' ]
 
  - platform: template
    id: heater_ch2
    type: float
    min_power: 0.001
    max_power: 0.998
    write_action:
      - cover.control:
            id: CH2_cover
            position: !lambda if (abs(id(CH2_cover).position - state) >= id(min_movement).state/100) { return state; }
                              else if (abs(id(CH2_cover).position) >= id(min_movement).state/100 ) {return id(CH2_cover).position;}
                              else {
                                     auto call = id(CH2_cover).make_call();
                                     call.set_command_close();
                                     call.perform();
                                     return (0.000);}

      - logger.log:
            format: "heater CH2  Sollpos: %.3f Istpos: %.3f"
            args: [ 'state','id(CH2_cover).position'  ]
 
  - platform: template
    id: heater_ch3
    type: float
    min_power: 0.001
    max_power: 0.998
    write_action:
      - cover.control:
            id: CH3_cover
            position: !lambda if (abs(id(CH3_cover).position - state) >= id(min_movement).state/100) { return state; }
                              else if (abs(id(CH3_cover).position) >= 0.01 ) {return id(CH3_cover).position;}
                              else {
                                     auto call = id(CH3_cover).make_call();
                                     call.set_command_close();
                                     call.perform();
                                     return (0.000);}

      - logger.log:
            format: "heater CH3  Sollpos: %.3f Istpos: %.3f"
            args: [ 'state','id(CH3_cover).position'  ]
 
  - platform: template
    id: heater_ch4
    type: float
    min_power: 0.001
    max_power: 0.998
    write_action:
      - cover.control:
            id: CH4_cover
            position: !lambda if (abs(id(CH4_cover).position - state) >= id(min_movement).state/100) { return state; }
                              else if (abs(id(CH4_cover).position) >= 0.01 ) {return id(CH4_cover).position;}
                              else {
                                     auto call = id(CH4_cover).make_call();
                                     call.set_command_close();
                                     call.perform();
                                     return (0.000);}

      - logger.log:
            format: "heater CH4 Sollpos: %.3f Istpos: %.3f"
            args: [ 'state','id(CH4_cover).position'  ]
 
  - platform: template
    id: heater_ch5
    type: float
    min_power: 0.001
    max_power: 0.998
    write_action:
      - cover.control:
            id: CH5_cover
            position: !lambda if (abs(id(CH5_cover).position - state) >= id(min_movement).state/100) { return state; }
                              else if (abs(id(CH5_cover).position) >= 0.01 ) {return id(CH5_cover).position;}
                              else {
                                     auto call = id(CH5_cover).make_call();
                                     call.set_command_close();
                                     call.perform();
                                     return (0.000);}

      - logger.log:
            format: "heater CH5 Sollpos: %.3f Istpos: %.3f"
            args: [ 'state','id(CH5_cover).position'  ]
 
  - platform: template
    id: heater_ch6
    type: float
    min_power: 0.001
    max_power: 0.998
    write_action:
      - cover.control:
            id: CH6_cover
            position: !lambda if (abs(id(CH6_cover).position - state) >= id(min_movement).state/100) { return state; }
                              else if (abs(id(CH6_cover).position) >= 0.01 ) {return id(CH6_cover).position;}
                              else {
                                     auto call = id(CH6_cover).make_call();
                                     call.set_command_close();
                                     call.perform();
                                     return (0.000);}

      - logger.log:
            format: "heater CH6 Sollpos: %.3f Istpos: %.3f"
            args: [ 'state','id(CH6_cover).position'  ]
 
  - platform: template
    id: heater_ch7
    type: float
    min_power: 0.001
    max_power: 0.998
    write_action:
      - cover.control:
            id: CH7_cover
            position: !lambda if (abs(id(CH7_cover).position - state) >= id(min_movement).state/100) { return state; }
                              else if (abs(id(CH7_cover).position) >= 0.01 ) {return id(CH7_cover).position;}
                              else {
                                     auto call = id(CH7_cover).make_call();
                                     call.set_command_close();
                                     call.perform();
                                     return (0.000);}

      - logger.log:
            format: "heater CH7 Sollpos: %.3f Istpos: %.3f"
            args: [ 'state','id(CH7_cover).position'  ]
 
  - platform: template
    id: heater_ch8
    type: float
    min_power: 0.001
    max_power: 0.998
    write_action:
      - cover.control:
            id: CH8_cover
            position: !lambda if (abs(id(CH8_cover).position - state) >= id(min_movement).state/100) { return state; }
                              else if (abs(id(CH8_cover).position) >= 0.01 ) {return id(CH8_cover).position;}
                              else {
                                     auto call = id(CH8_cover).make_call();
                                     call.set_command_close();
                                     call.perform();
                                     return (0.000);}

      - logger.log:
            format: "heater CH8 Sollpos: %.3f Istpos: %.3f"
            args: [ 'state','id(CH8_cover).position'  ]


sensor:
  - platform: pid
    name: "CH1 Oeffnung"
    type: HEAT
    id: ch1_heat
    climate_id: "PID_CH1"

  - platform: pid
    name: "CH2 Oeffnung"
    type: HEAT
    id: ch2_heat
    climate_id: "PID_CH2"

  - platform: pid
    name: "CH3 Oeffnung"
    type: HEAT
    id: ch3_heat
    climate_id: "PID_CH3"

  - platform: pid
    name: "CH4 Oeffnung"
    type: HEAT
    id: ch4_heat
    climate_id: "PID_CH4"

  - platform: pid
    name: "CH5 Oeffnung"
    type: HEAT
    id: ch5_heat
    climate_id: "PID_CH5"

  - platform: pid
    name: "CH6 Oeffnung"
    type: HEAT
    id: ch6_heat
    climate_id: "PID_CH6"

  - platform: pid
    name: "CH7 Oeffnung"
    type: HEAT
    id: ch7_heat
    climate_id: "PID_CH7"

  - platform: pid
    name: "CH8 Oeffnung"
    type: HEAT
    id: ch8_heat
    climate_id: "PID_CH8"

# Example configuration entry
climate:
  - platform: pid
    name: "PID Climate Controller CH1"
    id: "PID_CH1"
    sensor: ${ch1_thermostat_sensor}
    default_target_temperature: 21.2°C
    target_temperature_command_topic:  Hz/Hz.Bd.Th_Climate/desired-temp
    heat_output: heater_ch1
    control_parameters:
      kp: ${pid_kp}
      ki: ${pid_ki}
      kd: ${pid_kd}
      min_integral: 0.003
      max_integral: 0.997
      starting_integral_term: 0.1      # set for reboot 12%
      output_averaging_samples: 2      # smooth the output over 5 samples
      derivative_averaging_samples: 5  # smooth the derivative value over 10 samples

    visual:
      min_temperature: 19.0 °C
      max_temperature: 24.0 °C
      temperature_step: 0.05 °C

#    deadband_parameters:
#      threshold_high: 0.05°C       # deadband within +/-0.5°C of target_temperature
#      threshold_low: -0.05°C 
#
  - platform: pid
    name: "PID Climate Controller CH2"
    id: "PID_CH2"
    sensor: ${ch2_thermostat_sensor}
    default_target_temperature: 21.2°C
    target_temperature_command_topic:  Hz/Hz.Me.Th_Climate/desired-temp
    heat_output: heater_ch2
    control_parameters:
      kp: ${pid_kp}
      ki: ${pid_ki}
      kd: ${pid_kd}
      min_integral: 0.003
      max_integral: 0.997
      starting_integral_term: 0.25      # set for reboot 25
      output_averaging_samples: 2      # smooth the output over 5 samples
      derivative_averaging_samples: 5  # smooth the derivative value over 10 samples

    visual:
      min_temperature: 19.0 °C
      max_temperature: 24.0 °C
      temperature_step: 0.05 °C

#    deadband_parameters:
#      threshold_high: 0.05°C       # deadband within +/-0.5°C of target_temperature
#      threshold_low: -0.05°C 
#
  - platform: pid
    name: "PID Climate Controller CH3"
    id: "PID_CH3"
    sensor: ${ch3_thermostat_sensor}
    default_target_temperature: 21.2°C
    target_temperature_command_topic:  Hz/Hz.Me.Th_Climate/desired-temp
    heat_output: heater_ch3
    control_parameters:
      kp: ${pid_kp}
      ki: ${pid_ki}
      kd: ${pid_kd}
      min_integral: 0.003
      max_integral: 0.997
      starting_integral_term: 0.25      # set for reboot 25%
      output_averaging_samples: 2      # smooth the output over 5 samples
      derivative_averaging_samples: 5  # smooth the derivative value over 10 samples

    visual:
      min_temperature: 19.0 °C
      max_temperature: 24.0 °C
      temperature_step: 0.05 °C

#    deadband_parameters:
#      threshold_high: 0.05°C       # deadband within +/-0.5°C of target_temperature
#      threshold_low: -0.05°C 
#

  - platform: pid
    name: "PID Climate Controller CH4"
    id: "PID_CH4"
    sensor: ${ch4_thermostat_sensor}
    default_target_temperature: 21.2°C
    target_temperature_command_topic:  Hz/Hz.Wz.Th_Climate/desired-temp
    heat_output: heater_ch4
    control_parameters:
      kp: ${pid_kp}
      ki: ${pid_ki}
      kd: ${pid_kd}
      min_integral: 0.003
      max_integral: 0.997
      starting_integral_term: 0.25      # set for reboot 25%
      output_averaging_samples: 2      # smooth the output over 5 samples
      derivative_averaging_samples: 5  # smooth the derivative value over 10 samples

    visual:
      min_temperature: 19.0 °C
      max_temperature: 24.0 °C
      temperature_step: 0.05 °C

#    deadband_parameters:
#      threshold_high: 0.05°C       # deadband within +/-0.5°C of target_temperature
#      threshold_low: -0.05°C 
#
  - platform: pid
    name: "PID Climate Controller CH5"
    id: "PID_CH5"
    sensor: ${ch5_thermostat_sensor}
    default_target_temperature: 21.2°C
    target_temperature_command_topic:  Hz/Hz.Ku.Th_Climate/desired-temp
    heat_output: heater_ch5
    control_parameters:
      kp: ${pid_kp}
      ki: ${pid_ki}
      kd: ${pid_kd}
      min_integral: 0.003
      max_integral: 0.997
      starting_integral_term: 0.25      # set for reboot 12%
      output_averaging_samples: 2      # smooth the output over 5 samples
      derivative_averaging_samples: 5  # smooth the derivative value over 10 samples

    visual:
      min_temperature: 19.0 °C
      max_temperature: 24.0 °C
      temperature_step: 0.05 °C

#    deadband_parameters:
#      threshold_high: 0.05°C       # deadband within +/-0.5°C of target_temperature
#      threshold_low: -0.05°C 
#
  - platform: pid
    name: "PID Climate Controller CH6"
    id: "PID_CH6"
    sensor: ${ch6_thermostat_sensor}
    default_target_temperature: 21.2°C
    target_temperature_command_topic:  Hz/Hz.Wz.Th_Climate/desired-temp
    heat_output: heater_ch6
    control_parameters:
      kp: ${pid_kp}
      ki: ${pid_ki}
      kd: ${pid_kd}
      min_integral: 0.003
      max_integral: 0.997
      starting_integral_term: 0.25      # set for reboot 25%
      output_averaging_samples: 2      # smooth the output over 5 samples
      derivative_averaging_samples: 5  # smooth the derivative value over 10 samples

    visual:
      min_temperature: 19.0 °C
      max_temperature: 24.0 °C
      temperature_step: 0.05 °C

#    deadband_parameters:
#      threshold_high: 0.05°C       # deadband within +/-0.5°C of target_temperature
#      threshold_low: -0.05°C 
#
  - platform: pid
    name: "PID Climate Controller CH7"
    id: "PID_CH7"
    sensor: ${ch7_thermostat_sensor}
    default_target_temperature: 21.2°C
    target_temperature_command_topic:  Hz/Hz.Wz.Th_Climate/desired-temp
    heat_output: heater_ch7
    control_parameters:
      kp: ${pid_kp}
      ki: ${pid_ki}
      kd: ${pid_kd}
      min_integral: 0.003
      max_integral: 0.997
      starting_integral_term: 0.25      # set for reboot 12%
      output_averaging_samples: 2      # smooth the output over 5 samples
      derivative_averaging_samples: 5  # smooth the derivative value over 10 samples

    visual:
      min_temperature: 19.0 °C
      max_temperature: 24.0 °C
      temperature_step: 0.05 °C

#    deadband_parameters:
#      threshold_high: 0.05°C       # deadband within +/-0.5°C of target_temperature
#      threshold_low: -0.05°C 
#

  - platform: pid
    name: "PID Climate Controller CH8"
    id: "PID_CH8"
    sensor: ${ch8_thermostat_sensor}
    default_target_temperature: 21.2°C
    target_temperature_command_topic:  Hz/Hz.Gz.Th_Climate/desired-temp
    heat_output: heater_ch8
    control_parameters:
      kp: ${pid_kp}
      ki: ${pid_ki}
      kd: ${pid_kd}
      min_integral: 0.003
      max_integral: 0.997
      starting_integral_term: 0.25      # set for reboot 12%
      output_averaging_samples: 2      # smooth the output over 5 samples
      derivative_averaging_samples: 5  # smooth the derivative value over 10 samples

    visual:
      min_temperature: 19.0 °C
      max_temperature: 24.0 °C
      temperature_step: 0.05 °C




#    deadband_parameters:
#      threshold_high: 0.05°C       # deadband within +/-0.5°C of target_temperature
#      threshold_low: -0.05°C 
#    heat_out.min_output: 0
#    heat_out.max_output: 100



